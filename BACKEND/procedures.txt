-- procedure that lists books with filters applied
-- LIMIT NOT TESTED, WE NEED TO TEST IT IN WEBPAGE
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS listBooksFiltered(
  IN title VARCHAR(255),
  IN genre VARCHAR(255),
  IN author VARCHAR(255),
  IN release_date VARCHAR(255),
  IN var_languages VARCHAR (255),
  IN var_ISBN VARCHAR(13),
  IN page_num INT
) BEGIN
CALL getBookById((SELECT
  GROUP_CONCAT(DISTINCT book.ISBN_id)
FROM
  book
  INNER JOIN (
    books_genres_conn
    INNER JOIN genres ON genres.genre_id = books_genres_conn.genre_id
  ) ON book.ISBN_id = books_genres_conn.ISBN_id
  INNER JOIN (
    books_authors_conn
    INNER JOIN authors ON authors.author_id = books_authors_conn.author_id
  ) ON book.ISBN_id = books_authors_conn.ISBN_id
  INNER JOIN publishers ON publishers.publisher_id = book.publisher_id
  INNER JOIN languages ON languages.lang_id = book.lang_id
  INNER JOIN inventory ON inventory.ISBN_id = book.ISBN_id
WHERE
  book.title LIKE CONCAT("%", title, "%")
  AND genres.genre LIKE CONCAT("%", genre, "%")
  AND authors.author LIKE CONCAT("%", author, "%")
  AND CAST(book.release_date AS VARCHAR(255)) LIKE CONCAT("%", release_date, "%")
  AND languages.lang LIKE CONCAT("%", var_languages, "%")
  AND book.ISBN LIKE CONCAT("%", var_ISBN, "%")
  AND inventory.available = TRUE
LIMIT 10 OFFSET (page_num-1*10)
));
END;//
DELIMITER ;



-- procedure, that gets every information abt a book by id
-- can be used for desktop app too
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS getBookById(
  IN ID VARCHAR(255)
) BEGIN
SELECT
  book.ISBN_id, book.title, book.picture_base64, GROUP_CONCAT(DISTINCT genres.genre) AS genres, GROUP_CONCAT(DISTINCT authors.author) AS authors, publishers.publisher_id, book.release_date, languages.lang, book.ISBN, book.description
FROM
  book
  INNER JOIN (
    books_genres_conn
    INNER JOIN genres ON genres.genre_id = books_genres_conn.genre_id
  ) ON book.ISBN_id = books_genres_conn.ISBN_id
  INNER JOIN (
    books_authors_conn
    INNER JOIN authors ON authors.author_id = books_authors_conn.author_id
  ) ON book.ISBN_id = books_authors_conn.ISBN_id
  INNER JOIN publishers ON publishers.publisher_id = book.publisher_id
  INNER JOIN languages ON languages.lang_id = book.lang_id
  INNER JOIN inventory ON inventory.ISBN_id = book.ISBN_id
WHERE
  FIND_IN_SET(CAST(book.ISBN_id AS VARCHAR(255)), ID)
GROUP BY 1;
END;//
DELIMITER ;

-- get all borrowed books borrowed by userID
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS getBorrowedBooks(
  IN ID INT
) BEGIN
SELECT 
  inventory.book_id, book.ISBN_id, book.title, book.picture_base64, borrowings.end_date, borrowings.start_date, ( SELECT CASE WHEN COUNT(reservation.ISBN_id) > 0 THEN 'True' ELSE 'False' END FROM reservation WHERE reservation.ISBN_id = inventory.ISBN_id ) 
FROM 
  users INNER JOIN( borrowings INNER JOIN( inventory INNER JOIN book ON book.ISBN_id = inventory.ISBN_id ) ON inventory.book_id = borrowings.book_id ) ON users.user_id = borrowings.user_id 
WHERE 
  users.user_id = ID;
END;//
DELIMITER ;

-- checks if username is valid and sends password
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS sendPassword(
  IN username VARCHAR(255)
) BEGIN
SELECT users.password FROM users WHERE users.username = username AND users.active;
END;//
DELIMITER ;

-- returns if the book can be reserved or booked
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS checkAvailability(
 ISBN INT,
 userid INT
) BEGIN
DECLARE sth VARCHAR(11) DEFAULT "";
SET sth = (SELECT CASE WHEN
    COUNT(borrowings.book_id) +(
    SELECT
        COUNT(booking.book_id)
    FROM
        booking
    INNER JOIN inventory ON booking.book_id = inventory.book_id
    WHERE
        inventory.ISBN_id = ISBN
) >= COUNT(inventory.book_id) THEN 'reservation' ELSE 'booking'
END
FROM
    borrowings
RIGHT JOIN inventory ON borrowings.book_id = inventory.book_id
WHERE
    inventory.ISBN_id = ISBN AND inventory.available);
SELECT sth, IF(sth='reservation', CASE WHEN (SELECT COUNT(reservation.ISBN_id) FROM reservation INNER JOIN users ON reservation.user_id = users.user_id WHERE users.user_id = userid)<=3 THEN 'true' ELSE 'false' END, CASE WHEN (SELECT COUNT(booking.book_id) FROM booking INNER JOIN users ON booking.user_id = users.user_id WHERE users.user_id = userid)<=3 THEN 'true' ELSE 'false' END);
END;//
DELIMITER ;

-- reserves or books a book depending on avaliablity
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS addReservationOrBooking(
  ISBN INT,
  userid INT
) BEGIN
DECLARE _selected VARCHAR(20) DEFAULT '';
SET _selected = (SELECT CASE WHEN COUNT(borrowings.book_id) + (SELECT COUNT(booking.book_id) FROM booking INNER JOIN inventory ON booking.book_id = inventory.book_id WHERE inventory.ISBN_id = ISBN ) >= COUNT(inventory.book_id) THEN 'reservation' ELSE 'booking' END FROM borrowings RIGHT JOIN inventory ON borrowings.book_id = inventory.book_id WHERE inventory.ISBN_id = ISBN AND inventory.available);
IF (_selected = 'booking') THEN 
	INSERT INTO booking(book_id, user_id, end_date) VALUES((SELECT inventory.book_id FROM inventory LEFT JOIN borrowings ON borrowings.book_id = inventory.book_id WHERE borrowings.book_id IS NULL AND inventory.ISBN_id = ISBN AND inventory.available LIMIT 1), userid, CURRENT_DATE());
ELSEIF (_selected = 'reservation') THEN 
  INSERT INTO reservation(ISBN_id, user_id) VALUES(ISBN, userid);
END IF;
END;//
DELIMITER ;

-- extends the return date
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS extendReturnDate(
  bookid INT,
  userid INT
) BEGIN
UPDATE borrowings SET borrowings.end_date = DATE_ADD(borrowings.end_date, INTERVAL (SELECT system_settings.lengthening_time FROM system_settings) WEEK) WHERE borrowings.user_id = userid AND borrowings.book_id = bookid;
END;//
DELIMITER ;

-- PROCEDURES FOR THE DESKTOP APP
-- Gets all books can be searched by book id and isbn
-- NOT TESTED NEED TO TEST IN APP
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS getAllBooks(
  IN searchTerm VARCHAR(13),
  IN page_num INT
) BEGIN
SELECT book.ISBN, inventory.book_id, book.title FROM book INNER JOIN inventory ON inventory.ISBN_id = book.ISBN_id WHERE (inventory.book_id = searchTerm OR book.ISBN = searchTerm) OR searchTerm = '' LIMIT 10 OFFSET (page_num-1*10);
END;//
DELIMITER ;

-- Add a book
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS addBookType(
  IN ISBN VARCHAR(13),
  IN title VARCHAR(255),
  IN allGenres VARCHAR(255),
  IN allAuthors VARCHAR(255),
  IN publisherID INT,
  IN releaseDate DATE,
  IN lang VARCHAR(255),
  IN descript TEXT,
  IN picture TEXT
) BEGIN
IF (SELECT COUNT(book.ISBN_id) FROM book WHERE book.ISBN = ISBN) = 0 THEN
	BEGIN
    	-- add book
        IF (SELECT COUNT(languages.lang_id) FROM languages WHERE languages.lang = lang) = 0 THEN
        	BEGIN
            	INSERT INTO languages(languages.lang) VALUES(lang);
             END;
        END IF;
        INSERT INTO book(book.ISBN, book.title, book.publisher_id, book.release_date, book.lang_id, book.description, book.picture_base64) VALUES(ISBN, title, pulisherID, releaseDate, (SELECT languages.lang_id FROM languages WHERE languages.lang = lang), descript, picture);
		-- add authors
        
        -- add cathegories
        
    END;
ELSE
	SELECT 'Already exists';
END IF;
END;//
DELIMITER ;
